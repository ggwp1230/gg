from datetime import datetime
from string import Template

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton

from _loader import dp, bot
from handlers._states import StateAppeal, StateSupport
from keyboards.inline.admin import *
from keyboards.inline.users import *

import utils.sql._handlers as db
import utils._func as func
import utils._cfg as cfg


# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ–∂—Ä–∫–∞
@dp.callback_query_handler(text_startswith="admin_menu_support", state="*")
async def admin_menu_support(call: CallbackQuery, state: FSMContext):
	user_id, message_id = call.message.chat.id, call.message.message_id
	udata, urole = db.GetUsers(user_id), func.GetRole(user_id)

	# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
	split = call.data.split(":")
	try: menu_switch = split[1]
	except: menu_switch = False
	try: offset = int(split[2])
	except: offset = 0
	try: action_type = split[2]
	except: action_type = False

	# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
	if urole["id"] == 1 or urole["id"] == 2 or urole["id"] == 4 or urole["id"] == 5 or urole["id"] == 6:
		if not menu_switch:
			caption = "<b>üìÆ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å.</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:"
			markup = kb_admin_menu_support(udata, urole, menu_switch)

		# –ñ–∞–ª–æ–±–∞
		if menu_switch == "appeal":
			if not action_type:
				caption = "<b>üìÆ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å.</b>\n\n–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π:"
				markup = kb_admin_menu_support(udata, urole, menu_switch, offset)

			# –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
			if action_type == "off":
				state_data = await state.get_data()
				select_id = state_data.get("select_id", False)
				db.UpdateUsers(select_id, "support", "0")
				db.UpdateSupport("appeal", select_id, "message_id", "")
				
				# –û–ø–æ–≤–µ—â–µ–Ω–∏–µ
				select = db.GetUsers(select_id)
				caption = f'<b>üìÆ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å.</b>\n\n<b>üë®‚Äçüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href="tg://user?id={select_id}">{select["firstname"]}</a>'
				caption = caption + f'\n<b>üí¢ –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> –ñ–∞–ª–æ–±–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'
				caption = caption + f"\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚≠ïÔ∏è –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω"
				markup = kb_admin_menu_support(udata, menu_switch = "exit")
				
				await bot.send_message(select_id, "<b>üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.</b>", reply_markup=kb_menu_support(menu_switch = "exit"))
				await bot.send_message(user_id, caption, reply_markup=markup)
				res = await bot.send_message(user_id, "üîÑ‚å®Ô∏è", reply_markup=ReplyKeyboardRemove())
				await bot.delete_message(user_id, res.message_id)
				await state.finish()
				return

		# –ü—Ä—è–º–∞—è –ø–æ–∫—É–ø–∫–∞
		if menu_switch == "support":
			if not action_type:
				caption = "<b>üìÆ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å.</b>\n\n–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π:"
				markup = kb_admin_menu_support(udata, urole, menu_switch, offset)

			# –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
			if action_type == "off":
				state_data = await state.get_data()
				select_id = state_data.get("select_id", False)
				db.UpdateUsers(select_id, "support", "0")
				db.UpdateSupport("support", select_id, "message_id", "")
				
				# –û–ø–æ–≤–µ—â–µ–Ω–∏–µ
				select = db.GetUsers(select_id)
				caption = f'<b>üìÆ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å.</b>\n\n<b>üë®‚Äçüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href="tg://user?id={select_id}">{select["firstname"]}</a>'
				caption = caption + f'\n<b>üõí –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> –ü—Ä—è–º–∞—è –ø–æ–∫—É–ø–∫–∞'
				caption = caption + f"\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚≠ïÔ∏è –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω"
				markup = kb_admin_menu_support(udata, menu_switch = "exit")
				
				await bot.send_message(select_id, "<b>üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.</b>", reply_markup=kb_menu_support(menu_switch = "exit"))
				await bot.send_message(user_id, caption, reply_markup=markup)
				res = await bot.send_message(user_id, "üîÑ‚å®Ô∏è", reply_markup=ReplyKeyboardRemove())
				await bot.delete_message(user_id, res.message_id)
				await state.finish()
				return

		if menu_switch == "open":
			select_id = int(split[3])
			data = db.GetSupport(action_type, select_id)
			for i in data["message_id"].split(','):
				if i: await bot.forward_message(user_id, select_id, i)
			
			# –û–ø–æ–≤–µ—â–µ–Ω–∏–µ
			select = db.GetUsers(select_id)
			caption = f'<b>üìÆ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å.</b>\n\n<b>üë®‚Äçüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href="tg://user?id={select_id}">{select["firstname"]}</a>\n'
			if action_type == "appeal":
				caption = caption + f'\n<b>üí¢ –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> –ñ–∞–ª–æ–±–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'
			if action_type == "support":
				caption = caption + f'\n<b>üõí –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> –ü—Ä—è–º–∞—è –ø–æ–∫—É–ø–∫–∞'
			caption = caption + f'\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚úâÔ∏è –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞'
			markup = kb_admin_menu_support(udata, urole, menu_switch, action_type = action_type, select_id = select_id)
			
		if menu_switch == "activate":
			select_id = int(split[3])

			# –û–ø–æ–≤–µ—â–µ–Ω–∏–µ
			select = db.GetUsers(select_id)
			caption = f'<b>üìÆ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å.</b>\n\n<b>üë®‚Äçüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href="tg://user?id={select_id}">{select["firstname"]}</a>'
			if action_type == "appeal":
				caption = caption + f'\n<b>üí¢ –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> –ñ–∞–ª–æ–±–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'
			if action_type == "support":
				caption = caption + f'\n<b>üõí –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> –ü—Ä—è–º–∞—è –ø–æ–∫—É–ø–∫–∞'
			caption = caption + f'\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚úâÔ∏è –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞'
			caption = caption + f'\n\n–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –¥–∏–∞–ª–æ–≥—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ:'
			markup = kb_admin_menu_support(udata, urole, menu_switch, action_type = action_type, select_id = select_id)

			# –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞
			db.UpdateUsers(select_id, "support", user_id)
			db.UpdateSupport(action_type, user_id, "message_id", "")
			await bot.send_message(select_id, "<b>üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –¥–∏–∞–ª–æ–≥—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.</b>")
			
			# –ñ–∞–ª–æ–±–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
			if action_type == "appeal":
				await StateAppeal.operator.set()
				await state.update_data(select_id=select_id)

			# –ü—Ä—è–º–∞—è –ø–æ–∫—É–ø–∫–∞
			if action_type == "support":
				await StateSupport.operator.set()
				await state.update_data(select_id=select_id)

			# –ö–Ω–æ–ø–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
			kb_markup = ReplyKeyboardMarkup(resize_keyboard=True)
			kb_markup.add("‚≠ïÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
			await bot.send_message(user_id, f'<b>‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –¥–∏–∞–ª–æ–≥—É.</b>\n–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: <a href="tg://user?id={select_id}">{select["firstname"]}</a>\n\n‚ö†Ô∏è –ü–æ—Å–ª–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!', reply_markup=kb_markup)


	# –°–æ–æ–±—â–µ–Ω–∏–µ
	try: await bot.edit_message_text(caption, user_id, message_id, reply_markup=markup)
	except: pass


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∂–∞–ª–æ–±—ã
@dp.message_handler(content_types = ["any"], state=StateAppeal.operator)
async def menu_feedback_handler(message: types.Message, state: FSMContext):
	# __init__ #
	user_id, message_id = message.from_user.id, message.message_id
	udata, uclean = db.GetUsers(user_id), db.GetClean(user_id)

	state_data = await state.get_data()
	select_id = state_data.get("select_id", False)

	off_text = "‚≠ïÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
	try: off = message.text
	except: off = False
	if off:
		if off == off_text:
			db.UpdateUsers(select_id, "support", "0")
			db.UpdateSupport("appeal", select_id, "message_id", "")
			
			# –û–ø–æ–≤–µ—â–µ–Ω–∏–µ
			select = db.GetUsers(select_id)
			caption = f'<b>üìÆ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å.</b>\n\n<b>üë®‚Äçüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href="tg://user?id={select_id}">{select["firstname"]}</a>'
			caption = caption + f'\n<b>üí¢ –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> –ñ–∞–ª–æ–±–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'
			caption = caption + f"\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚≠ïÔ∏è –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω"
			markup = kb_admin_menu_support(udata, menu_switch = "exit")
			
			await bot.send_message(select_id, "<b>üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.</b>", reply_markup=kb_menu_support(menu_switch = "exit"))
			await bot.send_message(user_id, caption, reply_markup=markup)
			res = await bot.send_message(user_id, "üîÑ‚å®Ô∏è", reply_markup=ReplyKeyboardRemove())
			await bot.delete_message(user_id, res.message_id)
			await state.finish()
			return

	await bot.copy_message(select_id, user_id, message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä—è–º–æ–π –ø–æ–∫—É–ø–∫–∏
@dp.message_handler(content_types = ["any"], state=StateSupport.operator)
async def menu_feedback_handler(message: types.Message, state: FSMContext):
	# __init__ #
	user_id, message_id = message.from_user.id, message.message_id
	udata, uclean = db.GetUsers(user_id), db.GetClean(user_id)

	state_data = await state.get_data()
	select_id = state_data.get("select_id", False)

	off_text = "‚≠ïÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
	try: off = message.text
	except: off = False
	if off:
		if off == off_text:
			db.UpdateUsers(select_id, "support", "0")
			db.UpdateSupport("support", select_id, "message_id", "")
			
			# –û–ø–æ–≤–µ—â–µ–Ω–∏–µ
			select = db.GetUsers(select_id)
			caption = f'<b>üìÆ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å.</b>\n\n<b>üë®‚Äçüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href="tg://user?id={select_id}">{select["firstname"]}</a>'
			caption = caption + f'\n<b>üõí –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> –ü—Ä—è–º–∞—è –ø–æ–∫—É–ø–∫–∞'
			caption = caption + f"\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚≠ïÔ∏è –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω"
			markup = kb_admin_menu_support(udata, menu_switch = "exit")
			
			await bot.send_message(select_id, "<b>üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.</b>", reply_markup=kb_menu_support(menu_switch = "exit"))
			await bot.send_message(user_id, caption, reply_markup=markup)
			res = await bot.send_message(user_id, "üîÑ‚å®Ô∏è", reply_markup=ReplyKeyboardRemove())
			await bot.delete_message(user_id, res.message_id)
			await state.finish()
			return

	await bot.copy_message(select_id, user_id, message_id)