from datetime import datetime
from string import Template

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from _loader import dp, bot
from handlers._states import StateStats
from keyboards.inline.admin import *

import utils.sql._handlers as db
import utils._func as func


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.callback_query_handler(text_startswith="admin_menu_stats", state="*")
async def admin_menu_stats(call: CallbackQuery, state: FSMContext):
	user_id, message_id = call.message.chat.id, call.message.message_id
	udata = db.GetUsers(user_id)
	
	split = call.data.split(":")
	try: menu_switch = split[1]
	except: menu_switch = False
	try: menu_item = split[2]
	except: menu_item = False

	# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
	if not menu_switch:
		await state.finish()
		stats = db.GetStats()
		caption = f"<b>üìñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.</b>\n\n" \
			f"<b>–û–±—â–∞—è: {stats['s_work_time']}</b>\n" \
			f"<b>üë®‚Äç‚öïÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> <code>{stats['s_all_users']}</code>\n" \
			f"<b>üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ:</b> <code>{stats['s_all_payments']}</code>\n" \
			f"<b>üõí –ü—Ä–æ–¥–∞–Ω–æ:</b> <code>{stats['s_all_sale']}</code>\n" \
			f"<b>üí∞ –ù–∞ —Å—É–º–º—É:</b> <code>{stats['s_all_sale_pay']}</code>\n\n" \
			f"<b>–°–µ–≥–æ–¥–Ω—è: {stats['s_today']}</b>\n" \
			f"<b>üë®‚Äç‚öïÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> <code>{stats['s_today_users']}</code>\n" \
			f"<b>üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ:</b> <code>{stats['s_today_payments']}</code>\n" \
			f"<b>üõí –ü—Ä–æ–¥–∞–Ω–æ:</b> <code>{stats['s_today_sale']}</code>\n" \
			f"<b>üí∞ –ù–∞ —Å—É–º–º—É:</b> <code>{stats['s_today_sale_pay']}</code>"

	# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
	if menu_switch == "wallets":
		await state.finish()
		caption = f"<b>‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞.</b>\n<b>üîß –¢–∏–ø:</b> <code>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</code>\n\n‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω."
		wallets, stats = db.GetUsers(wallets = True), {"balance": 0, "s_pay": 0, "s_sale": 0, "s_sale_pay": 0}
		
		# –¢–∞–±–ª–∏—Ü–∞
		txt = ['<table class="table"><thead><tr>' \
			"<th>ID</th><th>Username</th><th>Firstname</th><th>–ë–∞–ª–∞–Ω—Å</th><th>–ü–æ–ø–æ–ª–Ω–µ–Ω–æ</th><th>–ü–æ–∫—É–ø–æ–∫</th><th>–ù–∞ —Å—É–º–º—É</th><th>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</th>" \
			"</tr></thead><tbody>", "", "</tbody><table>",]
		
		# –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö 
		if type(wallets) == dict: wallets = [wallets]
		for i in wallets:
			txt[1] = txt[1] + f"<tr><td>{i['user_id']}</td><td>{i['username']}</td><td>{i['firstname']}</td><td>{i['balance']}</td><td>{i['s_pay']}</td><td>{i['s_buy']}</td><td>{i['s_buy_pay']}</td><td>{i['reg_time']}</td></tr>"
			stats["balance"] = stats["balance"] + i["balance"]
			stats["s_pay"] = stats["s_pay"] + i["s_pay"]
			stats["s_sale"] = stats["s_sale"] + i["s_buy"]
			stats["s_sale_pay"] = stats["s_sale_pay"] + i["s_buy_pay"]
		
		# –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
		total = ['<div class="total">', '', '</div>']
		total[1] = total[1] + f"<p><b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(wallets)}</p>"
		total[1] = total[1] + f"<p><b>–ù–∞ –±–∞–ª–∞–Ω—Å–µ:</b> {stats['balance']} KZT</p>"
		total[1] = total[1] + f"<p><b>–ü–æ–ø–æ–ª–Ω–µ–Ω–æ:</b> {stats['s_pay']} KZT</p>"
		total[1] = total[1] + f"<p><b>–ö—É–ø–ª–µ–Ω–æ:</b> {stats['s_sale']}</p>"
		total[1] = total[1] + f"<p><b>–ù–∞ —Å—É–º–º—É:</b> {stats['s_sale_pay']} KZT</p>"

		# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
		txt, total = txt[0] + txt[1] + txt[2], total[0] + total[1] + total[2]
		func.StatsHTML(total + txt)

		# –û—Ç–ø—Ä–∞–≤–∫–∞
		await bot.send_document(user_id, document = open("data/SX9.stats.html", "rb"), caption = f"<b>‚öôÔ∏è –¢–∏–ø:</b> <i>–í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>\n<b>‚è± –ú–µ—Ç–∫–∞:</b> <code>{func.timestamp()}</code>")

	# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π/–ø—Ä–æ–¥–∞–∂
	if menu_switch == "n-num":
		await state.finish()
		caption = f"<b>‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞.</b>\n"
		if menu_item == "pay":
			caption = caption + f"<b>üîß –¢–∏–ø:</b> <code>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è</code>\n\n"
		if menu_item == "buy":
			caption = caption + f"<b>üîß –¢–∏–ø:</b> <code>–ü—Ä–æ–¥–∞–∂–∏</code>\n\n"
		caption = caption + f"‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ ¬´all¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
		caption = caption + f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
		await StateStats.data.set()
		await state.update_data(stats_type=menu_item)

	# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
	if menu_switch == "generate":
		state_data = await state.get_data()
		stats_type = state_data.get("stats_type", False)
		count = state_data.get("count", False)
		if stats_type and count:
			if stats_type == "pay": stats_name = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è"
			if stats_type == "buy": stats_name = "–ü—Ä–æ–¥–∞–∂–∏"
			caption = f"<b>‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞.</b>\n<b>üîß –¢–∏–ø:</b> <code>{stats_name}</code>\n\n"
			trans, stop_count = db.GetTransaction(stats_type, multiple = True), count
			
			if not trans:
				caption = caption + f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
			else:
				# –¢–∞–±–ª–∏—Ü–∞
				if stats_type == "pay":
					stats = {"p_count": 0, "p_success": 0, "p_rub_success": 0, "p_kzt_success": 0, "p_sum_success": 0, "p_error": 0, "p_rub_error": 0, "p_kzt_error": 0, "p_sum_error": 0}
					txt = ['<table class="table"><thead><tr>' \
						"<th>ID</th><th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th><th>–°—É–º–º–∞</th><th>–°–∏—Å—Ç–µ–º–∞</th><th>–ö–æ–¥</th><th>–í—Ä–µ–º—è</th><th>–°—Ç–∞—Ç—É—Å</th><th>–î–æ</th><th>–ü–æ—Å–ª–µ</th>" \
						"</tr></thead><tbody>", "", "</tbody><table>",]
				if stats_type == "buy":
					stats = {"b_sale": 0, "b_sale_pay": 0}
					txt = ['<table class="table"><thead><tr>' \
						"<th>ID</th><th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th><th>–°—É–º–º–∞</th><th>–¢–æ–≤–∞—Ä</th><th>–ü–æ–∑–∏—Ü–∏—è</th><th>–û–ø–ª–∞—á–µ–Ω–æ</th><th>[–ë–∞–ª–∞–Ω—Å] –î–æ</th><th>[–ë–∞–ª–∞–Ω—Å] –ü–æ—Å–ª–µ</th><th>–î–æ–±–∞–≤–∏–ª</th><th>–î–æ–±–∞–≤–ª–µ–Ω–æ</th>" \
						"</tr></thead><tbody>", "", "</tbody><table>",]

				# –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
				if type(trans) == dict: trans = [trans]
				trans.reverse()
				for i in trans:
					if stop_count == 0: break
					if stop_count != "all": stop_count = stop_count - 1
					if stats_type == "pay":
						txt[1] = txt[1] + f"<tr><td>{i['pay_id']}</td><td>{i['user_id']}</td><td>{i['amount']} {i['currency'].upper()}</td><td>{i['pay_system']}</td><td>{i['receipt']}</td><td>{i['pay_time']}</td><td>{i['pay_status']}</td><td>{i['before']}</td><td>{i['after']}</td></tr>"
						stats["p_count"] = stats["p_count"] + 1
						if i["pay_status"] == "PAID" or i["pay_status"] == "SUPPORT" or i["pay_status"] == "SUCCESS":
							stats["p_success"] = stats["p_success"] + 1
							if i["currency"] == "rub":
								stats["p_rub_success"] = stats["p_rub_success"] + i["amount"]
							if i["currency"] == "kzt":
								stats["p_kzt_success"] = stats["p_kzt_success"] + i["amount"]
						else:
							stats["p_error"] = stats["p_error"] + 1
							if i["currency"] == "rub":
								stats["p_rub_error"] = stats["p_rub_error"] + i["amount"]
							if i["currency"] == "kzt":
								stats["p_kzt_error"] = stats["p_kzt_error"] + i["amount"]
					if stats_type == "buy":
						txt[1] = txt[1] + f"<tr><td>{i['buy_id']}</td><td>{i['user_id']}</td><td>{i['price']} KZT</td><td>{i['content']}</td><td>{i['position_name']}</td><td>{i['buy_time']}</td><td>{i['before']}</td><td>{i['after']}</td><td>{i['creator_id']}</td><td>{i['creator_time']}</td></tr>"
						stats["b_sale"] = stats["b_sale"] + 1
						stats["b_sale_pay"] = stats["b_sale_pay"] + i["price"]

				# –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
				total = ['<div class="total">', '', '</div>']
				if stats_type == "pay":
					stats["p_sum_success"] = stats["p_kzt_success"] + func.CurrConvert("RUB:KZT", stats["p_rub_success"])
					stats["p_sum_error"] = stats["p_kzt_error"] + func.CurrConvert("RUB:KZT", stats["p_rub_error"])
					total[1] = total[1] + f"<p><b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π:</b> {stats['p_count']}</p><br>"
					total[1] = total[1] + f"<p><b>–£–¥–∞—á–Ω—ã—Ö:</b> {stats['p_success']}</p>"
					total[1] = total[1] + f"<p><b>–ù–∞ —Å—É–º–º—É:</b> {stats['p_kzt_success']} KZT + {stats['p_rub_success']} RUB ~ {stats['p_sum_success']} KZT</p>"
					total[1] = total[1] + f"<p><b>–ù–µ—É–¥–∞—á–Ω—ã—Ö:</b> {stats['p_error']}</p>"
					total[1] = total[1] + f"<p><b>–ù–∞ —Å—É–º–º—É:</b> {stats['p_kzt_error']} KZT + {stats['p_rub_error']} RUB ~ {stats['p_sum_error']} KZT</p>"
				if stats_type == "buy":
					total[1] = total[1] + f"<p><b>–ü—Ä–æ–¥–∞–Ω–æ:</b> {stats['b_sale']}</p>"
					total[1] = total[1] + f"<p><b>–ù–∞ —Å—É–º–º—É:</b> {stats['b_sale_pay']} KZT</p>"

				# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
				txt, total = txt[0] + txt[1] + txt[2], total[0] + total[1] + total[2]
				func.StatsHTML(total + txt)

				# –û—Ç–ø—Ä–∞–≤–∫–∞
				await bot.send_document(user_id, document = open("data/SX9.stats.html", "rb"), caption = f"<b>‚öôÔ∏è –¢–∏–ø:</b> <i>{stats_name}</i>\n<b>‚è± –ú–µ—Ç–∫–∞:</b> <code>{func.timestamp()}</code>")
				caption = caption + f"‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω."

	markup = kb_admin_menu_stats(menu_switch)


	# –°–æ–æ–±—â–µ–Ω–∏–µ
	try: await bot.edit_message_text(caption, user_id, message_id, reply_markup=markup)
	except: pass


# –û–±—Ä–∞–±–æ—Ç–∫–∞ N —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message_handler(content_types=["text"], state=StateStats.data)
async def admin_menu_stats_handler(message: types.Message, state: FSMContext):
	# __init__ #
	user_id, message_id = message.from_user.id, message.message_id
	udata, uclean = db.GetUsers(user_id), db.GetClean(user_id)
	await func.DeleteMSG(bot, user_id, message_id)
	message_id = uclean["home_id"]

	state_data = await state.get_data()
	stats_type = state_data.get("stats_type", False)

	get_data = func.StrToNum(message.text)
	if stats_type and get_data:
		if get_data == "all" or type(get_data) == int:
			if stats_type == "pay": stats_name = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è"
			if stats_type == "buy": stats_name = "–ü—Ä–æ–¥–∞–∂–∏"
			caption = f"<b>‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞.</b>\n<b>üîß –¢–∏–ø:</b> <code>{stats_name}</code>\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: <code>{get_data}</code>"
			markup = kb_admin_menu_stats("step")
			await state.update_data(count=get_data)


		# –°–æ–æ–±—â–µ–Ω–∏–µ
		try: await bot.edit_message_text(caption, user_id, message_id, reply_markup=markup)
		except: pass