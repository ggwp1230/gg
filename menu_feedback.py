from datetime import datetime
from string import Template

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton

from _loader import dp, bot
from handlers._states import StateAppeal, StateSupport
from keyboards.inline.users import *
from keyboards.inline.admin import *

import handlers._system_start as _system
import utils.sql._handlers as db
import utils._func as func
import utils._cfg as cfg


# –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
@dp.callback_query_handler(text_startswith="menu_feedback", state="*")
async def menu_feedback(call: CallbackQuery, state: FSMContext):
	user_id, message_id = call.message.chat.id, call.message.message_id
	udata, uclean, settings = db.GetUsers(user_id), db.GetClean(user_id), db.GetSettings()
	
	await state.finish()

	if settings['engineering_mode'] and not func.GetRole(user_id)["id"]: return await _system.engineering_work(user_id, message_id)

	split = call.data.split(":")
	try: menu_switch = split[1]
	except: menu_switch = False
	try: action_type = split[2]
	except: action_type = False

	# –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è
	if not menu_switch:
		caption = f"<b>üìÆ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å.</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:"
		markup = kb_menu_support(udata, menu_switch)

	# –ñ–∞–ª–æ–±–∞
	if menu_switch == "appeal":
		caption = f"<b>üí¢ –ñ–∞–ª–æ–±–∞ –Ω–∞ —Ç–æ–≤–∞—Ä.</b>\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."
		
		if not action_type:
			caption = caption + f"\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
			markup = kb_menu_support(udata, menu_switch)
			await StateAppeal.user.set()

		if action_type == "off":
			if udata["support"]: await bot.send_message(udata["support"], "<b>üë®‚Äçüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.</b>", reply_markup=kb_admin_menu_support(menu_switch = "exit"))
			db.UpdateUsers(user_id, "support", "0")
			db.UpdateSupport("appeal", user_id, "message_id", "")
			udata["support"] = 0

			caption = caption + f"\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚≠ïÔ∏è –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω"
			markup = kb_menu_support(udata, "exit")
			res = await bot.send_message(user_id, "üîÑ‚å®Ô∏è", reply_markup=ReplyKeyboardRemove())
			await bot.delete_message(user_id, res.message_id)

	# –ü—Ä—è–º–∞—è –ø–æ–∫—É–ø–∫–∞
	if menu_switch == "support":
		caption = f"<b>üõí –ü—Ä—è–º–∞—è –ø–æ–∫—É–ø–∫–∞.</b>\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."
		
		if not action_type:
			caption = caption + f"\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
			markup = kb_menu_support(udata, menu_switch)
			await StateSupport.user.set()

		if action_type == "off":
			await bot.send_message(udata["support"], "<b>üë®‚Äçüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.</b>", reply_markup=kb_admin_menu_support(menu_switch = "exit"))
			db.UpdateUsers(user_id, "support", "0")
			db.UpdateSupport("support", user_id, "message_id", "")
			udata["support"] = 0

			caption = caption + f"\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚≠ïÔ∏è –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω"
			markup = kb_menu_support(udata, "exit")
			res = await bot.send_message(user_id, "üîÑ‚å®Ô∏è", reply_markup=ReplyKeyboardRemove())
			await bot.delete_message(user_id, res.message_id)

	# –°–æ–æ–±—â–µ–Ω–∏–µ
	if uclean['location'] != "menu_feedback":
		await func.DeleteMSG(bot, user_id, [message_id, uclean["sticker_id"], uclean["home_id"]])
		try: r_sticker = await call.message.answer_sticker(settings["sticker_feedback"])
		except: r_sticker = False
		if r_sticker: db.SetClean(user_id, "sticker_id", r_sticker.message_id)
		r_message = await bot.send_message(user_id, caption, reply_markup=markup)
		db.SetClean(user_id, "home_id", r_message.message_id)
		db.SetClean(user_id, "location", "menu_feedback")
	else:
		try: await bot.edit_message_text(caption, user_id, message_id, reply_markup=markup)
		except: pass


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∂–∞–ª–æ–±—ã
@dp.message_handler(content_types = ["any"], state=StateAppeal.user)
async def menu_feedback_handler(message: types.Message, state: FSMContext):
	# __init__ #
	user_id, message_id = message.from_user.id, message.message_id
	udata, uclean, settings = db.GetUsers(user_id), db.GetClean(user_id), db.GetSettings()

	off_text = "‚≠ïÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
	try: off = message.text
	except: off = False
	if off:
		if off == off_text:
			if udata["support"]: await bot.send_message(udata["support"], "<b>üë®‚Äçüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.</b>", reply_markup=kb_admin_menu_support(menu_switch = "exit"))
			db.UpdateUsers(user_id, "support", "0")
			db.UpdateSupport("appeal", user_id, "message_id", "")
			udata["support"] = 0
			
			caption = f"<b>üí¢ –ñ–∞–ª–æ–±–∞ –Ω–∞ —Ç–æ–≤–∞—Ä.</b>\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."
			caption = caption + f"\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚≠ïÔ∏è –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω"
			markup = kb_menu_support(udata, "exit")
			await bot.send_message(user_id, caption, reply_markup=markup)
			await bot.send_message(user_id, False, reply_markup=ReplyKeyboardRemove())
			await state.finish()

	if settings['engineering_mode'] and not func.GetRole(user_id)["id"]: return await _system.engineering_work(user_id, message_id)

	if not udata["support"]:
		if off:
			if off == off_text: return
		db.AddSupport("appeal", user_id, message_id)
		
		# –û–ø–æ–≤–µ—â–µ–Ω–∏–µ
		kb_markup = ReplyKeyboardMarkup(resize_keyboard=True)
		kb_markup.add("‚≠ïÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
		await bot.send_message(user_id, "<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.</b>", reply_markup=kb_markup)
		await _system.SendNotify(f'<b>üë®‚Äçüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href="tg://user?id={user_id}">{udata["firstname"]}</a>\n<b>üí¢ –ñ–∞–ª–æ–±–∞ –Ω–∞ —Ç–æ–≤–∞—Ä.</b> –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.', "appeal")
		
		# –°–æ–æ–±—â–µ–Ω–∏–µ
		caption = f"<b>üí¢ –ñ–∞–ª–æ–±–∞ –Ω–∞ —Ç–æ–≤–∞—Ä.</b>\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."
		caption = caption + f"\n\n<b>–°—Ç–∞—Ç—É—Å:</b> üë®‚Äçüíª –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
		markup = kb_menu_support(udata, "appeal_off")
		try: await bot.edit_message_text(caption, user_id, uclean["home_id"], reply_markup=markup)
		except: pass
	else:
		await bot.forward_message(udata["support"], user_id, message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä—è–º–æ–π –ø—Ä–æ–¥–∞–∂–∏
@dp.message_handler(content_types = ["any"], state=StateSupport.user)
async def menu_feedback_handler(message: types.Message, state: FSMContext):
	# __init__ #
	user_id, message_id = message.from_user.id, message.message_id
	udata, uclean, settings = db.GetUsers(user_id), db.GetClean(user_id), db.GetSettings()

	off_text = "‚≠ïÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
	try: off = message.text
	except: off = False
	if off:
		if off == off_text:
			if udata["support"]: await bot.send_message(udata["support"], "<b>üë®‚Äçüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.</b>", reply_markup=kb_admin_menu_support(menu_switch = "exit"))
			db.UpdateUsers(user_id, "support", "0")
			db.UpdateSupport("support", user_id, "message_id", "")
			udata["support"] = 0
			
			caption = f"<b>üõí –ü—Ä—è–º–∞—è –ø–æ–∫—É–ø–∫–∞.</b>\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."
			caption = caption + f"\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚≠ïÔ∏è –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω"
			markup = kb_menu_support(udata, "exit")
			await bot.send_message(user_id, caption, reply_markup=markup)
			res = await bot.send_message(user_id, "üîÑ‚å®Ô∏è", reply_markup=ReplyKeyboardRemove())
			await bot.delete_message(user_id, res.message_id)
			await state.finish()

	if settings['engineering_mode'] and not func.GetRole(user_id)["id"]: return await _system.engineering_work(user_id, message_id)

	if not udata["support"]:
		if off:
			if off == off_text: return
		db.AddSupport("support", user_id, message_id)
		
		# –û–ø–æ–≤–µ—â–µ–Ω–∏–µ
		kb_markup = ReplyKeyboardMarkup(resize_keyboard=True)
		kb_markup.add("‚≠ïÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
		await bot.send_message(user_id, "<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.</b>", reply_markup=kb_markup)
		await _system.SendNotify(f'<b>üë®‚Äçüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href="tg://user?id={user_id}">{udata["firstname"]}</a>\n<b>üõí –ü—Ä—è–º–∞—è –ø–æ–∫—É–ø–∫–∞.</b> –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.', "support")
		
		# –°–æ–æ–±—â–µ–Ω–∏–µ
		caption = f"<b>üõí –ü—Ä—è–º–∞—è –ø–æ–∫—É–ø–∫–∞.</b>\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."
		caption = caption + f"\n\n<b>–°—Ç–∞—Ç—É—Å:</b> üë®‚Äçüíª –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
		markup = kb_menu_support(udata, "support_off")
		try: await bot.edit_message_text(caption, user_id, uclean["home_id"], reply_markup=markup)
		except: pass
	else:
		await bot.forward_message(udata["support"], user_id, message_id)