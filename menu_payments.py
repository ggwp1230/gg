from datetime import datetime
from string import Template
from pyqiwip2p import QiwiP2P

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from _loader import dp, bot
from handlers._states import StatePaySystem
import handlers._system_start as _system
from keyboards.inline.admin import *

import asyncio, json, requests
import utils.sql._handlers as db
import utils._func as func


# –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
@dp.callback_query_handler(text_startswith="admin_menu_payments", state="*")
async def admin_menu_payments(call: CallbackQuery, state: FSMContext):
	user_id, message_id = call.message.chat.id, call.message.message_id
	udata, urole = db.GetUsers(user_id), func.GetRole(user_id)
	await state.finish()

	# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
	split = call.data.split(":")
	try: menu_switch = split[1]
	except: menu_switch = False
	try: currency = split[2]
	except: currency = False
	if currency == "rub" or currency == "kzt":
		try: menu_item = split[3]
		except: menu_item = False
	else:
		try: menu_item = split[2]
		except: menu_item = False

	# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
	if urole["id"] == 1 or urole["id"] == 2:	
		paysys = db.GetPaySystem()
		
		# –°–ø–∏—Å–æ–∫
		if not menu_switch:
			caption = "<b>üí≥ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.</b>"

		# QIWI
		if menu_switch == "qiwi":
			if not currency:
				caption = "<b>üí≥ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.</b>\n<b>‚öôÔ∏è –°–ø–æ—Å–æ–±:</b> <code>Qiwi</code>"

			if currency:
				if currency == "rub": country = "üá∑üá∫"
				if currency == "kzt": country = "üá∞üáø"
				caption = f"<b>üí≥ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.</b>\n<b>‚öôÔ∏è –°–ø–æ—Å–æ–±:</b> {country} <code>Qiwi</code>"
				paysys = paysys[f"{menu_switch}_{currency}"].split('|*|')

			if menu_item and menu_item != "action" and currency:
				if menu_item == "p2p": method_name, paysys = "–ü–æ —Ñ–æ—Ä–º–µ", paysys[0]
				if menu_item == "terminal": method_name, paysys = "–ü–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é (–¢–µ—Ä–º–∏–Ω–∞–ª)", paysys[1]
				if menu_item == "nickname": method_name, paysys = "–ü–æ –Ω–∏–∫–Ω–µ–π–º—É", paysys[2]
				paysys = paysys.split(':')
				if func.StrBool(paysys[1]): status = "<b>üü¢ –°—Ç–∞—Ç—É—Å:</b> <code>On</code>"
				else: status = "<b>üî¥ –°—Ç–∞—Ç—É—Å:</b> <code>Off</code>"
				if paysys[2] != "NaN": token = "<b>üîë –¢–æ–∫–µ–Ω:</b> <code>–£–∫–∞–∑–∞–Ω</code>"
				else: token = "<b>üîë –¢–æ–∫–µ–Ω:</b> <code>NaN</code>"
				phone = f"<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{paysys[3]}</code>"
				try: nickname = f"\n<b>üè∑ –ù–∏–∫–Ω–µ–π–º:</b> <code>{paysys[4]}</code>"
				except: nickname = ""
				caption = f"<b>üí≥ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.</b>\n<b>‚öôÔ∏è –°–ø–æ—Å–æ–±:</b> {country} <code>Qiwi</code>\n<b>üî© –ú–µ—Ç–æ–¥:</b> <code>{method_name}</code>\n{status}\n{token}\n{phone}{nickname}"

			# –î–µ–π—Å—Ç–≤–∏—è
			if menu_item == "action":
				menu_item = split[4]
				action = split[5]
				if menu_item == "p2p": method_name = "–ü–æ —Ñ–æ—Ä–º–µ"
				if menu_item == "terminal": method_name = "–ü–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é (–¢–µ—Ä–º–∏–Ω–∞–ª)"
				if menu_item == "nickname": method_name = "–ü–æ –Ω–∏–∫–Ω–µ–π–º—É"

				# –í–∫–ª—é—á–∏—Ç—å / –í—ã–∫–ª—é—á–∏—Ç—å
				if action == "on" or action == "off":
					caption = f"<b>üí≥ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.</b>\n<b>‚öôÔ∏è –°–ø–æ—Å–æ–±:</b> {country} <code>Qiwi</code>\n<b>üî© –ú–µ—Ç–æ–¥:</b> <code>{method_name}</code>\n"

				# –í–∫–ª—é—á–∏—Ç—å
				if action == "on":
					db.SetPaySystem(f"qiwi", menu_item, currency, visible = "1")
					caption = caption + "<b>üü¢ –°—Ç–∞—Ç—É—Å:</b> <code>On</code>"
					await _system.SendNotify(f"<b>üîâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> <code>{udata['firstname']}</code>\n<b>–î–µ–π—Å—Ç–≤–∏–µ:</b> üü¢ –í–∫–ª—é—á–∏–ª <i>Qiwi ({method_name})</i> –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")

				# –í—ã–∫–ª—é—á–∏—Ç—å
				if action == "off":
					db.SetPaySystem(f"qiwi", menu_item, currency, visible = "0")
					caption = caption + "<b>üî¥ –°—Ç–∞—Ç—É—Å:</b> <code>Off</code>"
					await _system.SendNotify(f"<b>üîâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> <code>{udata['firstname']}</code>\n<b>–î–µ–π—Å—Ç–≤–∏–µ:</b> üî¥ –í—ã–∫–ª—é—á–∏–ª <i>Qiwi ({method_name})</i> –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")

				# –¢–µ–ª–µ—Ñ–æ–Ω / –¢–æ–∫–µ–Ω
				if action == "token" or action == "phone":
					sub_action = split[6]
					caption = f"<b>üí≥ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.</b>\n<b>‚öôÔ∏è –°–ø–æ—Å–æ–±:</b> {country} <code>Qiwi</code>\n<b>üî© –ú–µ—Ç–æ–¥:</b> <code>{method_name}</code>\n"
					if menu_item == "p2p": ps_id = 0
					if menu_item == "terminal": ps_id = 1
					if menu_item == "nickname": ps_id = 2
					paysys = paysys[ps_id].split(':')

				# –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
				if action == "phone":
					if sub_action == "edit":
						caption = caption + "\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω (–Ω–æ–º–µ—Ä) Qiwi –∫–æ—à–µ–ª—å–∫–∞:"
						
						await StatePaySystem.data.set()
						await state.update_data(menu_switch=menu_switch)
						await state.update_data(menu_item=menu_item)
						await state.update_data(currency=currency)
						await state.update_data(action=action)
						await state.update_data(sub_action=sub_action)
						menu_switch = "cancel"

				# –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
				if action == "token":
					if sub_action == "edit":
						if paysys[3] == "NaN":
							caption = caption + "\n‚ùå –î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω (–Ω–æ–º–µ—Ä)."
						else:
							# –ü–æ —Ñ–æ—Ä–º–µ
							if menu_item == "p2p":
								caption = caption + "\n‚ö†Ô∏è –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç üëâ <a href='https://qiwi.com/p2p-admin/transfers/api'>–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ</a>\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π p2p —Ç–æ–∫–µ–Ω:"
							
							# –ü–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –∏ –Ω–∏–∫–Ω–µ–π–º—É
							if menu_item == "terminal" or menu_item == "nickname":
								caption = caption + "\n‚ö†Ô∏è –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç üëâ <a href='https://qiwi.com/api'>–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ</a>\n–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞, —Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –≥–∞–ª–æ—á–∫–∏.\n–í–≤–µ–¥–∏—Ç–µ QIWI —Ç–æ–∫–µ–Ω:"
							
							await StatePaySystem.data.set()
							await state.update_data(menu_switch=menu_switch)
							await state.update_data(menu_item=menu_item)
							await state.update_data(currency=currency)
							await state.update_data(action=action)
							await state.update_data(sub_action=sub_action)
							await state.update_data(phone=paysys[3])
							menu_switch = "cancel"

		markup = kb_admin_menu_payments(udata, menu_switch, menu_item, currency)


		# –°–æ–æ–±—â–µ–Ω–∏–µ
		try: await bot.edit_message_text(caption, user_id, message_id, reply_markup=markup)
		except: pass


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
@dp.message_handler(content_types=["text"], state=StatePaySystem.data)
async def admin_menu_payments_handler(message: types.Message, state: FSMContext):
	# __init__ #
	user_id, message_id = message.from_user.id, message.message_id
	udata, uclean = db.GetUsers(user_id), db.GetClean(user_id)
	await func.DeleteMSG(bot, user_id, message_id)

	message_id = uclean["home_id"]

	state_data = await state.get_data()
	get_data = message.text

	if len(get_data):
		menu_switch = state_data.get("menu_switch", False)
		menu_item = state_data.get("menu_item", False)
		currency = state_data.get("currency", False)
		action = state_data.get("action", False)
		sub_action = state_data.get("sub_action", False)
		phone = state_data.get("phone", False)

		# Qiwi
		if menu_switch == "qiwi":
			if currency:
				# –¢–µ–ª–µ—Ñ–æ–Ω
				if action == "phone":
					if sub_action == "edit":
						db.SetPaySystem("qiwi", menu_item, currency, phone = get_data)
						await _system.SendNotify(f"<b>üîâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> <code>{udata['firstname']}</code>\n<b>–î–µ–π—Å—Ç–≤–∏–µ:</b> üì± –ò–∑–º–µ–Ω–∏–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è: <i>Qiwi ({menu_item})</i>")
						caption = "<b>‚úÖ –õ–æ–≥–∏–Ω (–Ω–æ–º–µ—Ä) —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.</b>"
						markup = kb_admin_menu_payments(udata, "exit")
						await state.finish()

				# –¢–æ–∫–µ–Ω
				if action == "token":
					# –î–æ–±–∞–≤–∏—Ç—å / –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å TOKEN
					if sub_action == "edit":
						# –î–ª—è P2P —Ñ–æ—Ä–º—ã
						if menu_item == "p2p":
							try: 
								qiwi = QiwiP2P(get_data)
								bill = qiwi.bill(amount=1, lifetime=1)
								error = False
							except: error = True
							if error:
								caption = "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π p2p —Ç–æ–∫–µ–Ω.</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω:"
								markup = kb_admin_menu_payments(udata, "cancel")
							else:
								db.SetPaySystem("qiwi", menu_item, currency, token = get_data)
								await _system.SendNotify(f"<b>üîâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> <code>{udata['firstname']}</code>\n<b>–î–µ–π—Å—Ç–≤–∏–µ:</b> üîë –ò–∑–º–µ–Ω–∏–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è: <i>Qiwi ({menu_item})</i>")
								caption = "<b>‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π p2p —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.</b>"
								markup = kb_admin_menu_payments(udata, "exit")
								await state.finish()

						# –î–ª—è QIWI/API
						if menu_item == "terminal" or menu_item == "nickname":
							await asyncio.sleep(0.5)
							try:
								request = requests.Session()
								request.headers["authorization"] = "Bearer " + get_data
								check_history = request.get(f"https://edge.qiwi.com/payment-history/v2/persons/{phone}/payments", params={"rows": 1, "operation": "IN"})
								check_profile = request.get(f"https://edge.qiwi.com/person-profile/v1/profile/current?authInfoEnabled=true&contractInfoEnabled=true&userInfoEnabled=true")
								check_balance = request.get(f"https://edge.qiwi.com/funding-sources/v2/persons/{phone}/accounts")
								try:
									if check_history.status_code == 200 and check_profile.status_code == 200 and check_balance.status_code == 200:
										# –ü–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
										if menu_item == "terminal":
											db.SetPaySystem("qiwi", menu_item, currency, token = get_data)
											await _system.SendNotify(f"<b>üîâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> <code>{udata['firstname']}</code>\n<b>–î–µ–π—Å—Ç–≤–∏–µ:</b> üîë –ò–∑–º–µ–Ω–∏–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è: <i>Qiwi ({menu_item})</i>")
											caption = "<b>‚úÖ Qiwi —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.</b>"
											markup = kb_admin_menu_payments(udata, "exit")
											await state.finish()

										# –ü–æ –Ω–∏–∫–Ω–µ–π–º—É
										if menu_item == "nickname":
											nickname = request.get(f"https://edge.qiwi.com/qw-nicknames/v1/persons/{phone}/nickname")
											check_nickname = json.loads(nickname.text).get("nickname")
											if check_nickname is None:
												caption = "<b>‚ùå –ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Qiwi –Ω–∏–∫–Ω–µ–π–º.</b>"
												markup = kb_admin_menu_payments(udata, "cancel")
											else:
												db.SetPaySystem("qiwi", menu_item, currency, token = get_data)
												db.SetPaySystem("qiwi", menu_item, currency, nickname = check_nickname)
												await _system.SendNotify(f"<b>üîâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> <code>{udata['firstname']}</code>\n<b>–î–µ–π—Å—Ç–≤–∏–µ:</b> üîë –ò–∑–º–µ–Ω–∏–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è: <i>Qiwi ({menu_item})</i>")
												caption = "<b>‚úÖ Qiwi —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.</b>"
												markup = kb_admin_menu_payments(udata, "exit")
												await state.finish()
									elif check_history.status_code == 403 or check_profile.status_code == 403 or check_balance.status_code == 403:
										caption = "<b>‚ùå –í–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.</b>\n<code>–û—à–∏–±–∫–∞: –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —É API —Ç–æ–∫–µ–Ω–∞)</code>"
										markup = kb_admin_menu_payments(udata, "cancel")
									elif check_history.status_code == 401 or check_profile.status_code == 401 or check_balance.status_code == 401:
										caption = "<b>‚ùå –í–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.</b>\n<code>–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è.</code>"
										markup = kb_admin_menu_payments(udata, "cancel")
									elif check_history.status_code == 400 or check_profile.status_code == 400 or check_balance.status_code == 400:
										caption = "<b>‚ùå –í–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.</b>\n<code>–û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∫–∞–∑–∞–Ω –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.</code>"
										markup = kb_admin_menu_payments(udata, "cancel")
									else:
										if check_history.status_code != 200: error = check_history.status_code
										if check_profile.status_code != 200: error = check_profile.status_code
										if check_balance.status_code != 200: error = check_balance.status_code
										caption = f"<b>‚ùå –í–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.</b>\n<code>–û—à–∏–±–∫–∞: –ö–æ–¥ –æ—à–∏–±–∫–∏ ({error}).</code>"
										markup = kb_admin_menu_payments(udata, "cancel")
								except json.decoder.JSONDecodeError:
									caption = f"<b>‚ùå –í–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.</b>\n<code>–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.</code>"
									markup = kb_admin_menu_payments(udata, "cancel")
							except IndexError:
								caption = f"<b>‚ùå –í–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.</b>\n<code>–û—à–∏–±–∫–∞: IndexError.</code>"
								markup = kb_admin_menu_payments(udata, "cancel")
							except UnicodeEncodeError:
								caption = f"<b>‚ùå –í–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.</b>\n<code>–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.</code>"
								markup = kb_admin_menu_payments(udata, "cancel")


		# –°–æ–æ–±—â–µ–Ω–∏–µ
		try: await bot.edit_message_text(caption, user_id, message_id, reply_markup=markup)
		except: pass