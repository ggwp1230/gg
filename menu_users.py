from datetime import datetime
from string import Template

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import CallbackQuery

from _loader import dp, bot
from handlers._states import StateUsers
import handlers._system_start as _system
from keyboards.inline.admin import *

import utils.sql._handlers as db
import utils._func as func


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
@dp.callback_query_handler(text_startswith="admin_menu_users", state="*")
async def admin_menu_users(call: CallbackQuery, state: FSMContext):
	user_id, message_id = call.message.chat.id, call.message.message_id
	udata = db.GetUsers(user_id)
	
	await state.finish()
	
	split = call.data.split(":")
	try: search = split[1]
	except: search = False
	try: offset = int(split[2])
	except: offset = 0

	# –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	if not search:
		caption = "<b>üíµ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.</b>\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ 3 –æ—Å–Ω–æ–≤–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: ID, Username, Firstname\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
		markup = kb_admin_menu_users_handler("back")
		await StateUsers.data.set()
		await state.update_data(action_type="search")
	
	# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É	
	if search:
		caption = "<b>üíµ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.</b>\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ 3 –æ—Å–Ω–æ–≤–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: ID, Username, Firstname"
		markup = kb_admin_menu_users(offset, search.replace('@',''))


	# –°–æ–æ–±—â–µ–Ω–∏–µ
	try: await bot.edit_message_text(caption, user_id, message_id, reply_markup=markup)
	except: pass


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@dp.callback_query_handler(text_startswith="call_a_menu_users", state="*")
async def callback_a_menu_users(call: CallbackQuery, state: FSMContext):
	user_id, message_id = call.message.chat.id, call.message.message_id
	udata = db.GetUsers(user_id)
	
	state_data = await state.get_data()

	# –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
	split = call.data.split(":")
	menu_item = split[1]
	try: search_id = split[2]
	except: search_id = False
	try: search = split[3]
	except: search = False

	# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
	if menu_item == "open" and search_id and search:
		data = db.GetUsers(search_id)
		caption = "<b>üíµ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.</b>\n\n" \
					f"<b>üßë‚Äçüíº ID:</b> <code>{data['user_id']}</code>\n" \
					f"<b>üè∑ –ò–º—è:</b> <code>{data['firstname']}</code>\n" \
					f"<b>üìå Username:</b> @{data['username']}\n\n" \
					f"<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> <i>{data['balance']} KZT</i>\n\n" \
					f'<b>üíé –ü–æ–ø–æ–ª–Ω–µ–Ω–æ:</b> <code>{udata["s_pay"]} KZT</code>\n\n' \
					f'<b>üõí –ü–æ–∫—É–ø–æ–∫:</b> <code>{udata["s_buy"]}</code>\n' \
					f'<b>üí≥ –ù–∞ —Å—É–º–º—É:</b> <code>{udata["s_buy_pay"]} KZT</code>\n\n' \
					f"<b>‚è± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> <i>{data['reg_time']}</i>"
		markup = kb_admin_menu_users_handler("open", search_id, search)

	# –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
	if menu_item == "balance" and search_id:
		data = db.GetUsers(search_id)
		caption = f"<b>üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <i>{data['balance']} KZT</i>\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:" # –í–∞–ª—é—Ç–∞
		markup = kb_admin_menu_users_handler("back", search_id, search)
		await StateUsers.data.set()
		await state.update_data(action_type="balance")
		await state.update_data(search_id=search_id)
		await state.update_data(search=search)

	# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
	if menu_item == "save":
		action_type = state_data.get("action_type", False)
		search_id = state_data.get("search_id", False)
		search = state_data.get("search", False)
		# –ë–∞–ª–∞–Ω—Å
		if action_type == "balance":
			data = db.GetUsers(search_id)
			new_balance = state_data.get("new_balance", 0)
			db.UpdateUsers(search_id, 'balance', new_balance)
			caption = f"<b>‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.</b>"
			markup = kb_admin_menu_users_handler("back", search_id, search)
			await _system.SendNotify(f"<b>üîâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> <code>{udata['firstname']}</code>\n<b>–î–µ–π—Å—Ç–≤–∏–µ:</b> ‚úèÔ∏è –ò–∑–º–µ–Ω–∏–ª –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{data['username']}\n<b>–ë–∞–ª–∞–Ω—Å:</b> <i>{data['balance']} KZT</i> ¬ª <i>{new_balance} KZT</i>")

	# –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
	if menu_item == "pay_history" or menu_item == "buy_history":
		data = db.GetUsers(search_id)

		try: offset = int(split[4])
		except: offset = 0

		if menu_item == "pay_history":
			caption = "<b>üìó –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π.</b>"
		if menu_item == "buy_history":
			caption = "<b>üìô –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫.</b>"

		caption = f"{caption}\n\n" \
					f"<b>üßë‚Äçüíº ID:</b> <code>{data['user_id']}</code>\n" \
					f"<b>üè∑ –ò–º—è:</b> <code>{data['firstname']}</code>\n" \
					f"<b>üìå Username:</b> @{data['username']}\n\n" \
					f"<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> <i>{data['balance']} KZT</i>" # –í–∞–ª—é—Ç–∞

		if menu_item == "pay_history":
			caption = f"{caption}\n\n" \
					f'<b>üíé –ü–æ–ø–æ–ª–Ω–µ–Ω–æ:</b> <code>{udata["s_pay"]} KZT</code>'
		if menu_item == "buy_history":
			caption = "<b>üìô –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫.</b>" \
					f'<b>üõí –ü–æ–∫—É–ø–æ–∫:</b> <code>{udata["s_buy"]}</code>\n' \
					f'<b>üí≥ –ù–∞ —Å—É–º–º—É:</b> <code>{udata["s_buy_pay"]} KZT</code>'

		markup = kb_admin_menu_users_history(menu_item, search_id, search, offset)

	# –û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é
	if menu_item == "pay_history_open" or menu_item == "buy_history_open":
		try: offset = int(split[4])
		except: offset = 0

		trns_id = int(split[5])
		users = db.GetUsers(search_id)

		if menu_item == "pay_history_open":
			data = db.GetTransaction("pay", trns_id)
			if data["pay_system"] == "qiwi:p2p": method_name = "QiwiP2P (–ü–æ —Ñ–æ—Ä–º–µ)"
			if data["pay_system"] == "qiwi:terminal": method_name = "Qiwi –¢–µ—Ä–º–∏–Ω–∞–ª"
			if data["pay_system"] == "qiwi:nickname": method_name = "Qiwi (–ü–æ –Ω–∏–∫–Ω–µ–π–º—É)"
			caption = f"<b>üìñ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:</b> <code>#{data['pay_id']}</code>\n" \
				f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href='tg://user?id={data['user_id']}'>{users['firstname']}</a> (@{users['username']}) | {data['user_id']}\n" \
				f"<b>‚è± –í—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞:</b> <i>{data['pay_time']}</i>\n" \
				f"<b>üè¶ –°–ø–æ—Å–æ–±:</b> <i>{method_name}</i>\n" \
				f"<b>üßæ –ö–æ–¥:</b> <i>{data['receipt']}</i>\n" \
				f"<b>üí∞ –°—É–º–º–∞:</b> <i>{data['amount']} {data['currency'].upper()}</i>\n" \
				f"<b>–î–æ:</b> <i>{data['before']} KZT</i>\n" \
				f"<b>–ü–æ—Å–ª–µ:</b> <i>{data['after']} KZT</i> ‚ö†Ô∏è <code>0 = NaN</code>\n\n" \
				f"<b>üìç –°—Ç–∞—Ç—É—Å:</b> <i>{data['pay_status']}</i>"

		if menu_item == "buy_history_open":
			data = db.GetTransaction("buy", trns_id)
			creator = db.GetUsers(data["creator_id"])
			caption = f"<b>üìñ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:</b> <code>#{data['buy_id']}</code>\n" \
				f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href='tg://user?id={data['user_id']}'>{users['firstname']}</a> (@{users['username']}) | {data['user_id']}\n" \
				f"<b>–î–æ:</b> <i>{data['before']} KZT</i>\n" \
				f"<b>–ü–æ—Å–ª–µ:</b> <i>{data['after']} KZT</i>\n" \
				f"<b>‚è± –í—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏:</b> <i>{data['buy_time']}</i>\n" \
				f"<b>üìã –ü–æ–∑–∏—Ü–∏—è:</b> <i>{data['position_name']}</i>\n" \
				f"<b>üí∞ –¶–µ–Ω–∞:</b> <i>{data['price']} KZT</i>\n\n" \
				f"<b>üìç –¢–æ–≤–∞—Ä:</b> {data['content']}\n" \
				f"<b>–î–æ–±–∞–≤–∏–ª:</b> <a href='tg://user?id={data['creator_id']}'>{creator['firstname']}</a> (@{creator['username']}) | {data['creator_id']}\n" \
				f"<b>–î–∞—Ç–∞:</b> <i>{data['creator_id']}</i>"

		markup = kb_admin_menu_users_history(menu_item.replace("_open", ""), search_id, search, offset, True)

	# –°–æ–æ–±—â–µ–Ω–∏–µ
	try: await bot.edit_message_text(caption, user_id, message_id, reply_markup=markup)
	except: pass


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@dp.message_handler(content_types=["text"], state=StateUsers.data)
async def callback_a_menu_users_handler(message: types.Message, state: FSMContext):
	# __init__ #
	user_id, message_id = message.from_user.id, message.message_id
	udata, uclean = db.GetUsers(user_id), db.GetClean(user_id)
	await func.DeleteMSG(bot, user_id, message_id)
	message_id = uclean["home_id"]

	state_data = await state.get_data()
	action_type = state_data.get("action_type", False)
	search_id = state_data.get("search_id", False)
	search = state_data.get("search", False)

	get_data = message.text
	if len(get_data):
		# –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if action_type == "search":
			caption = "<b>üíµ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.</b>\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ 3 –æ—Å–Ω–æ–≤–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: ID, Username, Firstname"
			search = db.GetUsers(search = get_data)
			if not search:
				caption = caption + f"\n\nüö´ –ó–∞–ø—Ä–æ—Å: ¬´<code>{get_data}</code>¬ª. –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
				markup = kb_admin_menu_users_handler("back")
			else:
				markup = kb_admin_menu_users(search = get_data)

		# –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
		if action_type == "balance":
			get_data = func.StrToNum(get_data)
			if type(get_data) == int or type(get_data) == float:
				data = db.GetUsers(search_id)
				caption = f"<b>üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <i>{data['balance']} KZT</i>\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <i>{get_data} KZT</i>" # –í–∞–ª—é—Ç–∞
				markup = kb_admin_menu_users_handler("save", search_id, search)
				await state.update_data(new_balance=get_data)


		# –°–æ–æ–±—â–µ–Ω–∏–µ
		try: await bot.edit_message_text(caption, user_id, message_id, reply_markup=markup)
		except: pass