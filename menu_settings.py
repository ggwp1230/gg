from datetime import datetime
from string import Template

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from _loader import dp, bot
from handlers._states import StateSettings
from keyboards.inline.admin import *

import utils.sql._handlers as db
import utils._func as func


# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–≥–∞–∑–∏–Ω–∞
@dp.callback_query_handler(text_startswith="admin_menu_settings", state="*")
async def admin_menu_settings(call: CallbackQuery, state: FSMContext):
	user_id, message_id = call.message.chat.id, call.message.message_id
	udata, urole = db.GetUsers(user_id), func.GetRole(user_id)

	# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
	split = call.data.split(":")
	try: menu_switch = split[1]
	except: menu_switch = False
	try: menu_item = split[2]
	except: menu_item = False
	try: offset = split[3]
	except: offset = 0

	# Crutch
	if menu_item != "stickers":
		await state.finish()
	
	# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
	if urole["id"] == 1 or urole["id"] == 2:
		markup = kb_admin_menu_settings(udata, menu_switch, menu_item, offset)
		settings = db.GetSettings()
		
		# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
		if not menu_switch:
			if settings["engineering_mode"]: caption = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã"
			else: caption = "–†–∞–±–æ—Ç–∞–µ—Ç"
			caption = f"<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞.</b>\n<b>üöß –°—Ç–∞—Ç—É—Å:</b> <code>{caption}</code>"
		
		# –ì–ª–∞–≤–Ω–∞—è
		if menu_switch == "main":
			caption = f"<b>üè† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞, —Å—Ç–∏–∫–µ—Ä—ã, –∫–Ω–æ–ø–∫–∏.</b>"
			# –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
			if menu_item == "screen":
				caption = f"<b>üñ• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.</b>\n\n–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n{settings['screen_main']}"

			# –°—Ç–∏–∫–µ—Ä—ã
			if menu_item == "stickers":
				caption = f"<b>üî• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞–º–∏.</b>"
				state_data = await state.get_data()
				current_sticker = state_data.get("current", False)
				if current_sticker:
					try: await bot.delete_message(user_id, current_sticker)
					except: pass

			# –ö–Ω–æ–ø–∫–∞ ¬´–ü–∞—Ä—Ç–Ω–µ—Ä—ã¬ª
			if menu_item == "specbtn":
				if settings['specbtn_toggle']: caption = "–í–∫–ª—é—á–µ–Ω–∞"
				else: caption = "–í—ã–∫–ª—é—á–µ–Ω–∞"
				caption = f"<b>üåë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π ¬´–ü–∞—Ä—Ç–Ω–µ—Ä—ã¬ª</b>\n\n–°—Ç–∞—Ç—É—Å: {caption}\n–¢–µ–∫—Å—Ç: {settings['specbtn_text']}\n–°—Å—ã–ª–∫–∞: {settings['specbtn_link']}\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞."
		
		# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
		if menu_switch == "info":
			caption = f"<b>‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</b>"
			# –ö–æ–Ω—Ç–∞–∫—Ç—ã
			if menu_item == "contacts":
				caption = f"<b>‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n{settings['screen_contacts']}"

			# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
			if menu_item == "instructions":
				caption = f"<b>üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</b>\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n{settings['screen_instructions']}"

			# –ü—Ä–∞–≤–∏–ª–∞
			if menu_item == "rules":
				caption = f"<b>üéì –ü—Ä–∞–≤–∏–ª–∞</b>\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n{settings['screen_rules']}"
			
			# –ß–∞—Ç
			if menu_item == "chat":
				caption = f"<b>üí¨ –ß–∞—Ç</b>\n\n–°—Å—ã–ª–∫–∞: {settings['chat_link']}\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞."

		# –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
		if menu_switch == "access":
			caption = f"<b>üîí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞.</b>"

		# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã
		if menu_switch == "engineering":
			if settings["engineering_mode"]:
				db.SetSettings('engineering_mode', '0')
				caption = "–†–∞–±–æ—Ç–∞–µ—Ç"
			else:
				db.SetSettings('engineering_mode', '1')
				caption = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã"
			caption = f"<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞.</b>\n<b>üöß –°—Ç–∞—Ç—É—Å:</b> <code>{caption}</code>"

		# –°–æ–æ–±—â–µ–Ω–∏–µ
		try: await bot.edit_message_text(caption, user_id, message_id, reply_markup=markup)
		except: pass


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
@dp.callback_query_handler(text_startswith="call_a_menu_settings", state="*")
async def callback_a_menu_settings(call: CallbackQuery, state: FSMContext):
	user_id, message_id = call.message.chat.id, call.message.message_id
	udata = db.GetUsers(user_id)
	
	state_data = await state.get_data()
	
	split = call.data.split(":")

	# –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
	menu_switch = split[1]
	menu_item = split[2]
	try: action_type = split[3]
	except: action_type = False

	if menu_switch and menu_item:
		settings = db.GetSettings()
		# –ì–ª–∞–≤–Ω–∞—è
		if menu_switch == "main":
			# –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
			if menu_item == "screen":
				# –ò–∑–º–µ–Ω–∏—Ç—å
				if action_type == "edit":
					caption = f"<b>üñ• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.</b>\n\n" \
						f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n{settings['screen_main']}\n\n" \
						f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –î–ª—è —ç—Ç–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: –ò–º—è –∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n" \
						f"–î–ª—è –∏—Ö –≤—ã–≤–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ <code>$username</code> –∏ <code>$balance</code> –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ.\n" \
						f"–ü—Ä–∏–º–µ—Ä: –í–∞—à–µ –∏–º—è: <code>$username</code> (<code>$balance</code>).\n\n" \
						f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:"
					markup = kb_admin_menu_settings_handler("back", menu_switch, menu_item)
					await StateSettings.data.set()
					await state.update_data(menu_switch=menu_switch)
					await state.update_data(menu_item=menu_item)
					await state.update_data(action_type=action_type)

				# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
				if action_type == "save":
					screen_main_text = state_data.get("screen_main_text", False)
					db.SetSettings("screen_main", screen_main_text)
					caption = f"<b>‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.</b>"
					markup = kb_admin_menu_settings_handler("back", menu_switch, menu_item)

			# –°—Ç–∏–∫–µ—Ä—ã
			if menu_item == "stickers":
				# –ò–∑–º–µ–Ω–∏—Ç—å
				if action_type != "save":
					if action_type == "home":
						caption = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
						sticker = settings["sticker_main"]
					if action_type == "shop":
						caption = "üõí –ö—É–ø–∏—Ç—å (–ö–∞—Ç–∞–ª–æ–≥)"
						sticker = settings["sticker_shop"]
					if action_type == "pricelist":
						caption = "üóí –ü—Ä–∞–π—Å"
						sticker = settings["sticker_pricelist"]
					if action_type == "profile":
						caption = "üßë‚Äçüíº –ö–∞–±–∏–Ω–µ—Ç"
						sticker = settings["sticker_profile"]
					if action_type == "about":
						caption = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
						sticker = settings["sticker_about"]
					if action_type == "feedback":
						caption = "üìÆ –°–≤—è–∑—å"
						sticker = settings["sticker_feedback"]
					
					if sticker == "Off":
						toggle = "Off"
						current = False
					else:
						toggle = "–Ω–∏–∂–µ"
						current = await call.message.answer_sticker(sticker)
					
					caption = f"<b>üî• –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤: {caption}</b>\n\n–¢–µ–∫—É—â–∏–π —Å—Ç–∏–∫–µ—Ä: <code>{toggle}</code>\n\n‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä —á—Ç–æ–±—ã –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–∞–º–µ–Ω—É, –∏–ª–∏ —Å–ª–æ–≤–æ ¬´<code>Off</code>¬ª –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:"
					markup = kb_admin_menu_settings_handler("back", menu_switch, menu_item)
					await StateSettings.data.set()
					await state.update_data(menu_switch=menu_switch)
					await state.update_data(menu_item=menu_item)
					await state.update_data(action_type=action_type)
					if current: await state.update_data(current=current.message_id)

				# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
				if action_type == "save":
					sticker_new = state_data.get("sticker_new", False)
					sticker_type = state_data.get("sticker_type", False)
					db.SetSettings(sticker_type, sticker_new)
					caption = f"<b>‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.</b>"
					markup = kb_admin_menu_settings_handler("back", menu_switch, menu_item)

			# –ö–Ω–æ–ø–∫–∞ ¬´–ü–∞—Ä—Ç–Ω–µ—Ä—ã¬ª
			if menu_item == "specbtn":
				# –í–∏–¥–∏–º–æ—Å—Ç—å
				if action_type == "visible":
					current = settings['specbtn_toggle']
					if current:
						db.SetSettings("specbtn_toggle", "0")
						caption = "–í—ã–∫–ª—é—á–µ–Ω–∞"
					else:
						db.SetSettings("specbtn_toggle", "1")
						caption = "–í–∫–ª—é—á–µ–Ω–∞"
					caption = f"<b>üåë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π ¬´–ü–∞—Ä—Ç–Ω–µ—Ä—ã¬ª</b>\n\n–°—Ç–∞—Ç—É—Å: {caption}\n–¢–µ–∫—Å—Ç: {settings['specbtn_text']}\n–°—Å—ã–ª–∫–∞: {settings['specbtn_link']}"
					markup = kb_admin_menu_settings(udata, menu_switch, menu_item)

				# –ò–∑–º–µ–Ω–∏—Ç—å
				if action_type == "edit":
					caption = f"<b>üåë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–ü–∞—Ä—Ç–Ω–µ—Ä—ã¬ª</b>\n\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <i>{settings['specbtn_text']}</i>\n–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {settings['specbtn_link']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
					markup = kb_admin_menu_settings_handler("back", menu_switch, menu_item)
					await StateSettings.data.set()
					await state.update_data(menu_switch=menu_switch)
					await state.update_data(menu_item=menu_item)
					await state.update_data(action_type=action_type)
					await state.update_data(stage_id="name")

				# –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
				if action_type == "step":
					specbtn_text = state_data.get("specbtn_text", False)
					caption = f"<b>üåë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–ü–∞—Ä—Ç–Ω–µ—Ä—ã¬ª</b>\n\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <i>{settings['specbtn_text']}</i>\n–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {settings['specbtn_link']}\n\n–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <i>{specbtn_text}</i>\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:"
					markup = kb_admin_menu_settings_handler("back", menu_switch, menu_item)
					await state.update_data(stage_id="link")

				# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
				if action_type == "save":
					specbtn_text = state_data.get("specbtn_text", False)
					specbtn_link = state_data.get("specbtn_link", False)
					db.SetSettings("specbtn_text", specbtn_text)
					db.SetSettings("specbtn_link", specbtn_link)
					caption = f"<b>‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.</b>"
					markup = kb_admin_menu_settings_handler("back", menu_switch, menu_item)

		# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
		if menu_switch == "info":
			# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
			if menu_item == "contacts":
				caption = "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã"
				current = "screen_contacts"
			if menu_item == "instructions":
				caption = "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
				current = "screen_instructions"
			if menu_item == "rules":
				caption = "üéì –ü—Ä–∞–≤–∏–ª–∞"
				current = "screen_rules"
			if menu_item == "chat":
				caption = "üí¨ –ß–∞—Ç"
				current = "chat_link"

			# –ò–∑–º–µ–Ω–∏—Ç—å
			if action_type == "edit":
				caption = f"<b>‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {caption}</b>\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –î–ª—è –∫–Ω–æ–ø–∫–∏ ¬´üí¨ –ß–∞—Ç¬ª –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ —Å—Å—ã–ª–∫–∞.\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n{settings[current]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
				markup = kb_admin_menu_settings_handler("back", menu_switch, menu_item)
				await StateSettings.data.set()
				await state.update_data(menu_switch=menu_switch)
				await state.update_data(menu_item=menu_item)
				await state.update_data(action_type=action_type)

			# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
			if action_type == "save":
				new_value = state_data.get("new_value", False)
				db.SetSettings(current, new_value)
				caption = f"<b>‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.</b>"
				markup = kb_admin_menu_settings_handler("back", menu_switch, menu_item)

		# –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
		if menu_switch == "access":
			# –î–æ–±–∞–≤–∏—Ç—å
			if menu_item == "add":
				if not action_type:
					caption = "<b>üîí –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
					markup = kb_admin_menu_settings_handler("back", menu_switch)
					await StateSettings.data.set()
					await state.update_data(menu_switch=menu_switch)
					await state.update_data(menu_item=menu_item)
					await state.update_data(stage_id="admin_id")

				# –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
				if action_type == "step":
					admin_id = state_data.get("admin_id", False)
					data = db.GetUsers(admin_id)
					caption = f"<b>üîí –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.</b>\n\nID: <i>{admin_id}</i>\nUsername: @{data['username']}\nFirstname: <i>{data['firstname']}</i>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:"
					markup = kb_admin_menu_settings_handler("access", menu_switch, menu_item)

				# –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
				if action_type == "access":
					role_switch = split[4]
					admin_id = state_data.get("admin_id", False)
					data = db.GetUsers(admin_id)
					if role_switch == "root": role_data = [1, "üëë –ì–ª. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"]
					if role_switch == "admin": role_data = [2, "üìó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"]
					if role_switch == "moder": role_data = [3, "üìô –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"]
					if role_switch == "operator": role_data = [4, "üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä"]
					if role_switch == "appeal": role_data = [5, "üë®‚Äçüíªüí¢ –û–ø–µ—Ä–∞—Ç–æ—Ä"]
					if role_switch == "support": role_data = [6, "üë®‚Äçüíªüõí –û–ø–µ—Ä–∞—Ç–æ—Ä"]
					caption = f"<b>üîí –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.</b>\n\nID: <i>{admin_id}</i>\nUsername: @{data['username']}\nFirstname: <i>{data['firstname']}</i>\n\n–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: <i>{role_data[1]}</i>"
					markup = kb_admin_menu_settings_handler("save", menu_switch, menu_item)
					await state.update_data(role_switch=role_data[0])

				# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
				if action_type == "save":
					admin_id = state_data.get("admin_id", False)
					role_switch = state_data.get("role_switch", False)
					db.UpdateUsers(admin_id, "role_id", role_switch)
					caption = f"<b>‚úÖ –ü—Ä–∞–≤–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.</b>"
					markup = kb_admin_menu_settings_handler("back", menu_switch)

			# [–û—Ç–∫—Ä—ã—Ç—å/–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è]
			if menu_item == "open" or menu_item == "notify" or menu_item == "notify_appeal" or menu_item == "notify_support":
				select_id = int(action_type)
				data = db.GetUsers(select_id)
				role_notify = {
					"all": "–í—ã–∫–ª—é—á–µ–Ω—ã",
					"appeal": "–í—ã–∫–ª—é—á–µ–Ω—ã",
					"support": "–í—ã–∫–ª—é—á–µ–Ω—ã"
				}
				if data["role_id"] == 1: role_data = "üëë –ì–ª. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
				if data["role_id"] == 2: role_data = "üìó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
				if data["role_id"] == 3: role_data = "üìô –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
				if data["role_id"] == 4: role_data = "üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä"
				if data["role_id"] == 5: role_data = "üë®‚Äçüíªüí¢ –û–ø–µ—Ä–∞—Ç–æ—Ä"
				if data["role_id"] == 6: role_data = "üë®‚Äçüíªüõí –û–ø–µ—Ä–∞—Ç–æ—Ä"
				if data["role_notify"]: role_notify["all"] = "–í–∫–ª—é—á–µ–Ω—ã"
				if data["role_notify_appeal"]: role_notify["appeal"] = "–í–∫–ª—é—á–µ–Ω—ã"
				if data["role_notify_support"]: role_notify["support"] = "–í–∫–ª—é—á–µ–Ω—ã"
				
				# –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
				if menu_item == "notify":
					if data["role_notify"]:
						role_notify["all"] = "–í—ã–∫–ª—é—á–µ–Ω—ã"
						db.UpdateUsers(select_id, 'role_notify', '0')
					else:
						role_notify["all"] = "–í–∫–ª—é—á–µ–Ω—ã"
						db.UpdateUsers(select_id, 'role_notify', '1')
			
				# –ñ–∞–ª–æ–±—ã
				if menu_item == "notify_appeal":
					if data["role_notify_appeal"]:
						role_notify["appeal"] = "–í—ã–∫–ª—é—á–µ–Ω—ã"
						db.UpdateUsers(select_id, 'role_notify_appeal', '0')
					else:
						role_notify["appeal"] = "–í–∫–ª—é—á–µ–Ω—ã"
						db.UpdateUsers(select_id, 'role_notify_appeal', '1')
				
				# –ü—Ä—è–º–∞—è –ø–æ–∫—É–ø–∫–∞
				if menu_item == "notify_support":
					if data["role_notify_support"]:
						role_notify["support"] = "–í—ã–∫–ª—é—á–µ–Ω—ã"
						db.UpdateUsers(select_id, 'role_notify_support', '0')
					else:
						role_notify["support"] = "–í–∫–ª—é—á–µ–Ω—ã"
						db.UpdateUsers(select_id, 'role_notify_support', '1')

				caption = f"<b>üîí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞.</b>\n\nID: <i>{select_id}</i>\nUsername: @{data['username']}\nFirstname: <i>{data['firstname']}</i>\n\n–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: <i>{role_data}</i>\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <i>{role_notify['all']}</i>\n–û –∂–∞–ª–æ–±–∞—Ö: <i>{role_notify['appeal']}</i>\n–û –ø—Ä—è–º–æ–π –ø–æ–∫—É–ø–∫–µ: <i>{role_notify['support']}</i>"
				markup = kb_admin_menu_settings(udata, menu_switch, "open", select_id = select_id)

			# –£–¥–∞–ª–∏—Ç—å
			if menu_item == "delete":
				select_id = int(action_type)
				db.UpdateUsers(select_id, 'role_id', '0')
				db.UpdateUsers(select_id, 'role_notify', '0')
				db.UpdateUsers(select_id, 'role_notify_appeal', '0')
				db.UpdateUsers(select_id, 'role_notify_support', '0')
				caption = f"<b>‚ùå –ü—Ä–∞–≤–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.</b>"
				markup = kb_admin_menu_settings_handler("back", menu_switch)


		# –°–æ–æ–±—â–µ–Ω–∏–µ
		try: await bot.edit_message_text(caption, user_id, message_id, reply_markup=markup)
		except: pass


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
@dp.message_handler(content_types=["text", "sticker"], state=StateSettings.data)
async def callback_a_menu_settings_handler(message: types.Message, state: FSMContext):
	# __init__ #
	user_id, message_id = message.from_user.id, message.message_id
	udata, uclean = db.GetUsers(user_id), db.GetClean(user_id)
	await func.DeleteMSG(bot, user_id, message_id)
	message_id = uclean["home_id"]

	state_data = await state.get_data()
	
	# –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
	menu_switch = state_data.get("menu_switch", False)
	menu_item = state_data.get("menu_item", False)
	action_type = state_data.get("action_type", False)
	try: get_data = message.text
	except: get_data = ""

	if menu_switch and menu_item:
		settings = db.GetSettings()
		# –ì–ª–∞–≤–Ω–∞—è
		if menu_switch == "main":
			# –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
			if menu_item == "screen":
				if len(get_data):
					# –ò–∑–º–µ–Ω–∏—Ç—å
					if action_type == "edit":
						caption = f"<b>üñ• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.</b>\n\n" \
							f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n{settings['screen_main']}\n\n" \
							f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –î–ª—è —ç—Ç–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: –ò–º—è –∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n" \
							f"–î–ª—è –∏—Ö –≤—ã–≤–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ <code>$username</code> –∏ <code>$balance</code> –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ.\n" \
							f"–ü—Ä–∏–º–µ—Ä: –í–∞—à–µ –∏–º—è: <code>$username</code> (<code>$balance</code>).\n\n" \
							f"–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n{get_data}"
						markup = kb_admin_menu_settings_handler("save", menu_switch, menu_item)
						await state.update_data(screen_main_text=get_data)

			# –°—Ç–∏–∫–µ—Ä—ã
			if menu_item == "stickers":
				try: new_sticker = message.sticker.file_id
				except: new_sticker = False
				if new_sticker or get_data == "Off":
					if action_type == "home":
						caption = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
						sticker = "sticker_main"
					if action_type == "shop":
						caption = "üõí –ö—É–ø–∏—Ç—å (–ö–∞—Ç–∞–ª–æ–≥)"
						sticker = "sticker_shop"
					if action_type == "pricelist":
						caption = "üóí –ü—Ä–∞–π—Å"
						sticker = "sticker_pricelist"
					if action_type == "profile":
						caption = "üßë‚Äçüíº –ö–∞–±–∏–Ω–µ—Ç"
						sticker = "sticker_profile"
					if action_type == "about":
						caption = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
						sticker = "sticker_about"
					if action_type == "feedback":
						caption = "üìÆ –°–≤—è–∑—å"
						sticker = "sticker_feedback"
					
					current = state_data.get("current", False)
					try: await bot.delete_message(user_id, current)
					except: pass
					if get_data == "Off":
						toggle = "Off"
						new_sticker = "Off"
					else: toggle = "–Ω–∏–∂–µ"
					
					caption = f"<b>üî• –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤: {caption}</b>\n\n–ù–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä: <code>{toggle}</code>\n\n‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä —á—Ç–æ–±—ã –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–∞–º–µ–Ω—É, –∏–ª–∏ —Å–ª–æ–≤–æ ¬´<code>Off</code>¬ª –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:"
					markup = kb_admin_menu_settings_handler("save", menu_switch, menu_item)
					
					try: current = await message.answer_sticker(new_sticker)
					except: current = False
					await state.update_data(sticker_type=sticker)
					await state.update_data(sticker_new=new_sticker)
					if current: await state.update_data(current=current.message_id)

			# –ö–Ω–æ–ø–∫–∞ ¬´–ü–∞—Ä—Ç–Ω–µ—Ä—ã¬ª
			if menu_item == "specbtn":
				if len(get_data):
					# –ò–∑–º–µ–Ω–∏—Ç—å
					if action_type == "edit":
						stage_id = state_data.get("stage_id", False)
						# –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
						if stage_id == "name":
							caption = f"<b>üåë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–ü–∞—Ä—Ç–Ω–µ—Ä—ã¬ª</b>\n\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <i>{settings['specbtn_text']}</i>\n–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {settings['specbtn_link']}\n\n–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <i>{get_data}</i>"
							markup = kb_admin_menu_settings_handler("step", menu_switch, menu_item)
							await state.update_data(specbtn_text=get_data)

						# –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞
						if stage_id == "link":
							specbtn_text = state_data.get("specbtn_text", False)
							caption = f"<b>üåë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–ü–∞—Ä—Ç–Ω–µ—Ä—ã¬ª</b>\n\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <i>{settings['specbtn_text']}</i>\n–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {settings['specbtn_link']}\n\n–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <i>{specbtn_text}</i>\n–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {get_data}"
							markup = kb_admin_menu_settings_handler("save", menu_switch, menu_item)
							await state.update_data(specbtn_link=get_data)

		# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
		if menu_switch == "info":
			# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
			if menu_item == "contacts":
				caption = "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã"
				current = "screen_contacts"
			if menu_item == "instructions":
				caption = "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
				current = "screen_instructions"
			if menu_item == "rules":
				caption = "üéì –ü—Ä–∞–≤–∏–ª–∞"
				current = "screen_rules"
			if menu_item == "chat":
				caption = "üí¨ –ß–∞—Ç"
				current = "chat_link"

			# –ò–∑–º–µ–Ω–∏—Ç—å
			if action_type == "edit" and len(get_data):
				caption = f"<b>‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {caption}</b>\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –î–ª—è –∫–Ω–æ–ø–∫–∏ ¬´üí¨ –ß–∞—Ç¬ª –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ —Å—Å—ã–ª–∫–∞.\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n{settings[current]}\n\n–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n{get_data}"
				markup = kb_admin_menu_settings_handler("save", menu_switch, menu_item)
				await state.update_data(new_value=get_data)

		# –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
		if menu_switch == "access":
			# –î–æ–±–∞–≤–∏—Ç—å
			get_data = func.StrToNum(get_data)
			if menu_item and type(get_data) == int:
				stage_id = state_data.get("stage_id", False)
				if stage_id == "admin_id":
					data = db.GetUsers(get_data)
					if data:
						caption = f"<b>üîí –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.</b>\n\nID: <i>{data['user_id']}</i>\nUsername: @{data['username']}\nFirstname: <i>{data['firstname']}</i>"
						markup = kb_admin_menu_settings_handler("step", menu_switch, menu_item)
						await state.update_data(admin_id=get_data)
					else:
						caption = "<b>üîí –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.</b>\n\nüö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
						markup = kb_admin_menu_settings_handler("back", menu_switch, menu_item)

		# –°–æ–æ–±—â–µ–Ω–∏–µ
		try: await bot.edit_message_text(caption, user_id, message_id, reply_markup=markup)
		except: pass